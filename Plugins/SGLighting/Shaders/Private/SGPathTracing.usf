#include "/Engine/Private/Common.ush"
#include "SGCommon.ush"


[numthreads(32, 32, 1)]
void MainCS(uint3 ThreadId : SV_DispatchThreadID)
{
	float sizeX, sizeY;
	OutTexture.GetDimensions(sizeX, sizeY);
	float2 iResolution = float2(sizeX, sizeY);
	float2 uv = (float2(ThreadId.x, ThreadId.y) / iResolution.xy);//get uv

	RWTexture2D<float4> SGTexes[SG_NUM] = {SG1, SG2, SG3, SG4, SG5, SG6, SG7, SG8, SG9, SG10, SG11, SG12};
	
	//TODO: 备选去黑边方案: 将烘焙的图利用洪水算法往外扩一个像素
	if(InPosition.Sample(InPositionSampler, uv).w <= 0.5)//空白像素不计算
	{
		OutTexture[ThreadId.xy] = float4(0.0, 0.0, 0.0, 1.0);
		return;
	}
	
	FMainLight Light = MainLightBuffer[0];
	float3 pos = InPosition.Sample(InPositionSampler, uv).xyz;//pos ws
	float3 normal = InNormal.Sample(InNormalSampler, uv).xyz;//normal ws

	float3 dirColor[SG_NUM] = {float3(0,0,0),
	float3(0,0,0),
	float3(0,0,0),
	float3(0,0,0),
	float3(0,0,0),
	float3(0,0,0),
	float3(0,0,0),
	float3(0,0,0),
	float3(0,0,0),
	float3(0,0,0),
	float3(0,0,0),
	float3(0,0,0)};
	float3 finalColor = 0;
	float3 dirColor_1 = 0;
	for(int i = 0; i < SampleCount; i++)
	{
		float3 rayDir = GetRandomDir(normal, pos + i * normal, uv * i + seed);
		Ray ray = GetRay(pos + normal * 0.002, rayDir, uv, normal);
		float3 rayColor = PathTracingShading(ray, depth, Light);
		finalColor += rayColor;

		//TODO: 投射到SG
		for(int j = 0; j <SG_NUM; j++)
		{
			dirColor[j] += ProjectOntoSGs(rayDir, rayColor, SGBuffer[j]);
		}
	}
	finalColor /= SampleCount;
	for(int j = 0; j <SG_NUM; j++)
	{
		dirColor[j] /= SampleCount;
	}

	//输出
	OutTexture[ThreadId.xy] = float4(finalColor, 1.0);//主纹理
	//SG纹理
	TestTexture[ThreadId.xy] = float4(dirColor_1, 1.0);
	
	SG1[ThreadId.xy] = float4(dirColor[0], 1.0);
	SG2[ThreadId.xy] = float4(dirColor[1], 1.0);
	SG3[ThreadId.xy] = float4(dirColor[2], 1.0);
	SG4[ThreadId.xy] = float4(dirColor[3], 1.0);
	SG5[ThreadId.xy] = float4(dirColor[4], 1.0);
	SG6[ThreadId.xy] = float4(dirColor[5], 1.0);
	SG7[ThreadId.xy] = float4(dirColor[6], 1.0);
	SG8[ThreadId.xy] = float4(dirColor[7], 1.0);
	SG9[ThreadId.xy] = float4(dirColor[8], 1.0);
	SG10[ThreadId.xy] = float4(dirColor[9], 1.0);
	SG11[ThreadId.xy] = float4(dirColor[10], 1.0);
	SG12[ThreadId.xy] = float4(dirColor[11], 1.0);

	// for(int i = 0; i < SG_NUM; i++)
	// {
	// 	SGTexes[i][ThreadId.xy] = float4(saturate(SGBuffer[i].Axis), 1.0);
	// }

}

